#!/usr/bin/env perl
use 5.012;
use warnings;
use JSON::PP;
use FindBin qw($RealBin);
use lib "$RealBin/asap-lib";
use Spreadsheet::WriteExcel;	#conda install -c bioconda perl-spreadsheet-writeexcel 
use File::Basename;
use Getopt::Long;
use File::Spec;
use Data::Dumper;
use File::Copy;
use Pod::Usage;
use utf8;
my $VERSION = '1.3.0';
my $cmd_string = File::Spec->catfile($RealBin, basename($0) ) . ' "' . join('" "', @ARGV) .'"';

my $opt_output;
my $opt_reads_dir;
my $opt_fastq_tag = '(fastq|fq)';
my $opt_id_separator = '_';
my $opt_for_tag = "_R1";
my $opt_rev_tag = "_R2";
my $opt_single_separator = '\.';
my @opt_ref;
my $opt_project_name = 'ASA3P_Project';
my $opt_project_description = 'Isolate genomes sequencing';
my $opt_user_name = 'User';
my $opt_user_surname = '';
my $opt_user_mail = 'asap@example.com';
my $opt_genus = 'Bacterium';
my $opt_species = 'sp.';
my $warnings = 0;
my $errors   = 0;
my $opt_copy;
my %title_font     = ( font => 'Arial',       size => 12,  bold  => 1, bg_color => 'silver');
my %monospace_font = ( font => 'Courier New', size => 11 );
my $opt_verbose;
my $opt_help;
my $opt_version;
my $opt_project_info;
my $opt_force;

GetOptions(
	'i|input-dir=s'         => \$opt_reads_dir,
	'r|reference=s'         => \@opt_ref,
	'o|output-dir=s'        => \$opt_output,
	'g|genus=s'             => \$opt_genus,
	's|species=s'           => \$opt_species,
	'ft|for-tag=s'          => \$opt_for_tag,
	'rt|rev-tag=s'          => \$opt_rev_tag,
	'it|id-separator=s'     => \$opt_id_separator,	
	
	'project-name'          => \$opt_project_name,
	'project-description=s' => \$opt_project_description,
	'user-name=s'           => \$opt_user_name,
	'user-surname=s'        => \$opt_user_surname,
	'user-mail=s'           => \$opt_user_mail,

	'p|project-info=s'      => \$opt_project_info,
	'c|copy-files'          => \$opt_copy,
	'v|verbose'             => \$opt_verbose,
	'force'                 => \$opt_force,
	'version'               => \$opt_version,
	'h|help'                => \$opt_help,
);

$opt_version && version();

pod2usage({-exitval => 0, -verbose => 2}) 
	if $opt_help;

die usage() 
    if (not defined $opt_reads_dir or not defined  $opt_output or not defined $opt_ref[0]);
 

if (! -d "$opt_output") {
	verbose("Creating directory: $opt_output");
	mkdir "$opt_output" || die "FATAL ERROR:\nUnable to create project directory <$opt_output>.\n";
} else {
	# 1.2 - directory found
	if ($opt_force) {
		`rm -rf \"$opt_output\"/*`;
		if ( $? ) {
			print STDERR "ERROR: Unable to remove output directory: $opt_output\n";
		} else {
			print STDERR "INFO: Output directory cleaned.\n";
		}
	} else {
		print STDERR "ERROR: Output directory ($opt_output) found, quitting (use --force to override).\n";
	}

}

mkdir File::Spec->catdir("$opt_output", 'data');
my $config_file = File::Spec->catfile("$opt_output", 'config.xls');

my $project_data;
if (defined $opt_project_info) {
	$project_data = load_from_json($opt_project_info);
}

my $project_name = $project_data->{'project_name'} // $opt_project_name;
my $project_description = $project_data->{'project_description'} // $opt_project_description;
my $user_mail    = $project_data->{'user_mail'} // $opt_user_mail;
my $user_name    = $project_data->{'user_name'} // $opt_user_name;
my $user_surname = $project_data->{'user_surname'} // $opt_user_surname;
my $genus        = $project_data->{'genus'} // $opt_genus;
$opt_for_tag = $project_data->{'for_tag'} // $opt_for_tag;
$opt_rev_tag = $project_data->{'rev_tag'} // $opt_rev_tag;
$opt_single_separator = $project_data->{'opt_single_separator'} // $opt_single_separator;

unless ($genus) {
	die "MISSING PARAMETER 'genus': Specify via --genus GENUS or in the JSON config file.\n";
}
my ($workbook, $project_worksheet, $strains_worksheet)  = init();
verbose("Running: $cmd_string");
verbose("REFERENCE FILES");
my $ref_cell = 14;
for my $ref_file (@opt_ref) {
	my $cell = 'B'.$ref_cell;
	$project_worksheet->write("$cell", basename($ref_file));
	$ref_cell++;
	verbose(" - Adding reference: $ref_file in B$ref_cell");

	if ($opt_copy) {
		verbose("   - Copying reference file");
		copy("$ref_file", File::Spec->catdir("$opt_output", 'data')) 
		   or die "ERROR:\nCopy of $ref_file to ".File::Spec->catdir("$opt_output", 'data')."failed:\n$!\n";
	} else {
		print STDERR "WARNING: Files not copied (use -c) to $opt_output\n";
	}
}

verbose("INPUT FASTQ FILES");
opendir my $dir, "$opt_reads_dir" or die "ERROR: Cannot open reads directory: $!";
my @input_reads_files = readdir $dir;
my %samples;
for my $file (sort @input_reads_files) {
	my $sample;
	next if ($file =~/^\./);
	next unless ($file=~/$opt_fastq_tag/);

	my $basename = basename($file);
	verbose(" - FASTQ file found: $basename");
	
	if ($basename =~/$opt_for_tag/) {
		($sample) = split /($opt_id_separator|$opt_for_tag)/, $basename;
		$sample = clean_sample_name($sample);
		die "FATAL ERROR: Parsing file <$basename> the inferred sample ID was <$sample:FOR>,".
		" but that also belongs to <$samples{$sample}{for}>\n" if (defined $samples{$sample}{'for'});
		$samples{$sample}{'for'} = $basename;
		verbose("   - FOR:$sample");
	} elsif ($basename =~/$opt_rev_tag/) {
		($sample) = split /($opt_id_separator|$opt_rev_tag)/, $basename;
		$sample = clean_sample_name($sample);
		verbose("   - REV:$sample");
		die "FATAL ERROR: Parsing file <$basename> the inferred sample ID was <$sample:REV>,".
		" but that also belongs to <$samples{$sample}{rev}>\n" if (defined $samples{$sample}{'rev'});
		$samples{$sample}{'rev'} = $basename;
	} else {
		verbose("   - SE:$sample");
		($sample) = split /$opt_single_separator/, $basename;
		$sample = clean_sample_name($sample);
		die "FATAL ERROR: Parsing file <$basename> the inferred sample ID was <$sample:SINGLE>,".
		" but that also belongs to <$samples{$sample}{for}>\n" if (defined $samples{$sample}{'for'});
		$samples{$sample}{'for'} = $basename;
	}
	if ($opt_copy) {
		verbose("   - Copying file");
		copy(File::Spec->catfile("$opt_reads_dir", "$file"), File::Spec->catdir("$opt_output", 'data')) or die "ERROR:\nCopy of $file to $opt_output failed: $!\n";
	}
	
}

my $sample_cell = 2;
for my $sample (sort keys %samples) {
	my $type = 'single';
	$strains_worksheet->write("A$sample_cell", "$opt_species");	# species name like 'coli'
	$strains_worksheet->write("B$sample_cell", "$sample");	# has to be unique (ID)
	
	if (defined $samples{$sample}{'rev'}) {
		$type = 'paired-end';
		$strains_worksheet->write("C$sample_cell", $type);	# single paired-end contigs genome
		$strains_worksheet->write("D$sample_cell", $samples{$sample}{'for'});
		$strains_worksheet->write("E$sample_cell", $samples{$sample}{'rev'});
		verbose(" - Writing $sample:\t$type\t$samples{$sample}{'for'},$samples{$sample}{'rev'} in range A$sample_cell:B$sample_cell");
	} else {
		$strains_worksheet->write("C$sample_cell", $type);	# single paired-end contigs genome
		$strains_worksheet->write("D$sample_cell", $samples{$sample}{'for'});
		verbose(" - Writing $sample:\t$type\t$samples{$sample}{'for'} in range A$sample_cell:B$sample_cell");
	}
	$sample_cell++;
	
}


$workbook->close() or die "Error closing config.xls file: $!";

sub clean_sample_name {
	my $name = shift @_;
	#Only alpha-numerics, '-' and '.' are allowed. It should contain at least 2 and a maximum of 50 characters.
	$name =~s/[^A-Za-z0-9-.]/-/g;
	$name = substr($name, 0, 50);
	$name = 'X' . $name if (length($name) < 2);
	return $name;
}
sub init {

	my $workbook = Spreadsheet::WriteExcel->new("$config_file");
	$workbook->compatibility_mode();
		my $title_format        = $workbook->add_format(%title_font);
		my $merged_title_format = $workbook->add_format(%title_font);
		my $monospace           = $workbook->add_format(%monospace_font);

	my $project_worksheet = $workbook->add_worksheet('Project');

		$project_worksheet->merge_range('A1:B1', 'Project', $merged_title_format);
		$project_worksheet->merge_range('A7:B7', 'User', $merged_title_format);
		$project_worksheet->merge_range('A13:B13', 'Reference genomes', $merged_title_format);
		$project_worksheet->write('E2', "Samplesheet generated with start-asap on " . getLoggingTime());
		$project_worksheet->write('E3', "https://github.com/quadram-institute-bioscience/start-asap/");

		$project_worksheet->write('E5', "Command string:");
		$project_worksheet->write('E6', "$cmd_string", $monospace);

		$project_worksheet->write('A2', "Name");
		$project_worksheet->write('A3', "Description");
		$project_worksheet->write('A4', "Genus");
		$project_worksheet->write('B2', "$project_name");
		$project_worksheet->write('B3', "$project_description");
		$project_worksheet->write('B4', "$genus");

		$project_worksheet->write('A8', "Name");
		$project_worksheet->write('A9', "Surname");
		$project_worksheet->write('A10', "Email");
		$project_worksheet->write('B8', "$user_name");
		$project_worksheet->write('B9', "$user_surname");
		$project_worksheet->write('B10', "$user_mail");

		$project_worksheet->write('A14', "Reference Genome List");


		$project_worksheet->set_column('A:A', '25');
		$project_worksheet->set_column('B:B', '40');
		$project_worksheet->set_column('E:E', '80');
	
	my $strains_worksheet = $workbook->add_worksheet('Strains');
	#Species	Strain	Input	File 1	[ File 2 ]	[ File 3 ]
		$strains_worksheet->write('A1', 'Species', $title_format);	# species name like 'coli'
		$strains_worksheet->write('B1', 'Strain', $title_format);	# has to be unique (ID)
		$strains_worksheet->write('C1', 'Input', $title_format);	# single paired-end contigs genome
		$strains_worksheet->write('D1', 'File 1', $title_format);
		$strains_worksheet->write('E1', '[ File 2 ]', $title_format);
		$strains_worksheet->write('F1', '[ File 3 ]', $title_format);

		$strains_worksheet->set_column('A:C', '15');
		$strains_worksheet->set_column('D:F', '35');

		return ($workbook, $project_worksheet, $strains_worksheet);
}

sub load_from_json {
	my $json;
	my $file = shift(@_);
	{
	  local $/; #Enable 'slurp' mode
	  open my $fh, "<", "$file" || die "FATAL ERROR:\nError loading project info from $file\n";
	  $json = <$fh>;
	  close $fh;
	}
	return decode_json($json);
}
sub getLoggingTime {

    my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst)=localtime(time);
    my $nice_timestamp = sprintf ( "%04d-%02d-%02d %02d:%02d:%02d",
                                   $year+1900,$mon+1,$mday,$hour,$min,$sec);
    return $nice_timestamp;
}

sub verbose {
	return 0 if not defined $opt_verbose;
	say STDERR join("\n", @_);
}
sub version {
    # Display version if needed
    die "start-asap.pl $VERSION\n";
}
 
sub usage {
    # Short usage string in case of errors
    say STDERR "start-asap.pl -i READS_DIR -r REFERENCE -o OUT_DIR -g Genus\n";

    exit;
}
__END__
 
=head1 NAME
 
B<start-asap.pl> - Create a config.xml file for the ASA3P pipeline
 
=head1 AUTHOR
 
Andrea Telatin <andrea.telatin@quadram.ac.uk>
 
=head1 SYNOPSIS
 
   start-asap.pl -i READS_DIR -r REFERENCE_FILE -o OUTPUT_DIR [-p JSON_FILE | -g GENUS -s SPECIES ...]
 
=head1 DESCRIPTION
 
Prepare the input directory for 'ASA3P', creating automatically a _config.xls_ file from the reads provided.
Requires one or more reference files (.gbk recommended) and a directory with FASTQ files (.fq or .fastq, gzipped).
Metadata can be supplied via command line or with a JSON file.
 
=head1 MAIN PARAMETERS
 
=over 4
 
=item I<-i>, I<--input-dir> DIRECTORY

Directory containing the raw reads in FASTQ format. 

=item I<-r>, I<--reference> FILE

Reference file in FASTA or GBK format (other formats are supported by ASA3P, but have not been tested)

=item I<-o>, I<--output-dir> DIRECTORY

Project directory that will be the input of ASA3P. Will be created if not exists and
a C<config.xml> file will be placed there. The directory will contain a C<data> subdirectory,
left empty by default.

=item I<-c>, I<--copy-files> 

Place a copy of the reads and reference files in the C<./data> subdirectory.

=item I<--force> 

Remove the content of the output directory, if a config file is found.

=item I<-ft>, I<--for-tag> STRING

String denoting the file is a Forward file (default: "_R1"). 

=item I<-rt>, I<--rev-tag> STRING

String denoting the file is a Reverse file (default: "_R2")

=item I<-it>, I<--id-separator> STRING

The sample ID will determined splitting the name at the separator (default: "_"). 

=back

B<project metadata>: See the METADATA section


=head1 METADATA

For each project the following metadata is required, that can be provided either from the command line or with a JSON file
like the following. Not al the lines need to be added, if the defaults are fine (eg: for-tag, rev-tag):

   {
      "user_name" : "Andrea",
      "user_mail" : "info@example.com",
      "user_surname" : "Telatin",
      "project_name": "MaxiSeq",
      "project_description" : "Resequencing of 1230 E. coli isolates",
      "genus" : "Escherichia",
      "species": "coli",
      "project_name" : "Example project",
      "for_tag": "_1",
      "rev_tag": "_2",


   }


=over 4
 
=item I<-p>, I<--project-info> JSON_FILE

A JSON file with project metadata. 

=back


Alternatively (will override JSON metadata):

=over 4

=item I<--genus> STRING

Genus of the bacteria

=item I<--species> STRING

Species of the bacteria

=item I<--project-name> STRING

Project code name

=item I<--project-description> STRING

A description for the project

=item I<--user-name> STRING

First name of the project customer


=item I<--user-surname> STRING

Last name of the project customer

=item I<--user-mail> STRING

Email address name of the project customer

=back

=head1 BUGS
 
Open an issue in the GitHub repository L<https://github.com/quadram-institute-bioscience/start-asap/issues>.
 
=head1 COPYRIGHT
 
Copyright (C) 2019-2020 Andrea Telatin 
 
This program is free software distributed under the MIT licence.	
 
=cut